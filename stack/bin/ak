#!/usr/bin/env bash
set -e

SERVER=${SERVER:="$2.akretion.com"}
POSTGRESQL_DB=${POSTGRESQL_DB:="db"}
POSTGRESQL_DATA=${POSTGRESQL_DATA:="/workspace/.db"}
WORKDIR=${WORKDIR:="/workspace"}
DOCKER_USER=${DOCKER_USER:="developer"}
BUILDOUT=${BUILDOUT:="buildout.dev.cfg"}
IMAGE_EGGS_DIR=${IMAGE_EGGS_DIR:="/opt/devstep/addons/voodoo/eggs"}

# *************************** INITIALISATION FIRST RUN ********************

# Link the shared eggs folder or init a new one
if $SHARED_EGGS; then
  for folder in eggs downloads
  do
    if [ ! -d "$SHARED_FOLDER/$folder" ]; then
        mkdir $SHARED_FOLDER/$folder
    fi
    if [ ! -d "$WORKDIR/$folder" ]; then
      ln -s $SHARED_FOLDER/$folder $WORKDIR/$folder
    fi
  done
elif [ ! -d "$WORKDIR/eggs" ]; then
  mkdir $WORKDIR/eggs
fi

if [[ -z $(ls "$WORKDIR/eggs" | grep psycopg) ]]; then
  echo "initializing shared host eggs directory from Docker image"
  cp "$IMAGE_EGGS_DIR"/. $WORKDIR/eggs -R
fi

# Generate bin/buildout if missing
if [ ! -f "$WORKDIR/bin/buildout" ]; then
  echo "Bootstrapping Buildout..."
  cd $WORKDIR
  wget https://raw.github.com/buildout/buildout/master/bootstrap/bootstrap.py
  python bootstrap.py
  rm bootstrap.py
fi

# *************************** COMMAND DISPATCH ********************

case $1 in

# Buildout & Co command

  run)
    shift
    [ ! -f "$WORKDIR/bin/start_openerp" ] || [ ! -f "$WORKDIR/parts/odoo/setup.py" ] && \
    export FROM_BASH=true && ak build
    ak wait_postgres
    python "$WORKDIR/bin/start_openerp" "$@"
    ;;

  upgrade)
    shift
    [ ! -f "$WORKDIR/bin/upgrade_openerp" ] && \
    export FROM_BASH=true && ak build
    ak wait_postgres
    dbname="db"
    while getopts "d:" opt; do
     case $opt in
          d) dbname=$OPTARG;;
     esac
    done
    echo "Upgrade $dbname"
    python "$WORKDIR/bin/upgrade_openerp" "-d $dbname"
    ;;

  build)
    shift
    file="buildout.dev.cfg"
    echo "building project with Anybox Buildout recipe and config file $file"
    echo "this can take a while..."
    python "$WORKDIR/bin/buildout" "$@" "-c" "$file"
    ;;

  init)
    shift
    echo "drop and init db by installing modules $@"
    export FROM_BASH=true
        # force drop db if arg -f
    dbname="db"
    modules="base"
    parmindex=0
    demo=0
    withdemo=0

    for opt in "$@"; do
         i=$[$i +1]
         case $opt in
              -d) var=${@:$parmindex+1:$parmindex}
                  if [ -z "$var" ]; then
                      echo "Option -d requires an argument." >&2
                      exit 1
                  else
                        dbname=$var
                  fi
                  # remove -d dbname from args "$@"
                  set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
                  set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
                  ;;
         esac
    done

    for opt in "$@"; do
        parmindex=$[$parmindex +1]
        case $opt in
              -f)
                  echo -e "\tDrop then create : $dbname"
                  dropdb $dbname --if-exists
                  createdb $dbname
                   # remove -f from args "$@"
                  set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
              "--1by1" | "-b")
                  echo -e "\tUpdate modules one by one"
                  by1=1
                  # remove --1by1 or -b from args "$@"
                  set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
                --demo)
                    echo -e "\t init with demo"
                    withdemo=1
                    # remove --demo from args "$@"
                    set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
        esac
    done

    if [ -z "$1" ]; then
        modules="base"
    else
        modules="$1"
    fi

    if [ "$withdemo" == 1 ]; then
      ak run "-i" "$modules" "-d $dbname"
    else
      ak run "-i" "$modules" "-d $dbname" "--without-demo=True"
    fi

<<COMMENT1
    # install module one by one
    if [ $by1=1 ]; then
        modules="base"
        IFS=',' eval 'modulearray=($string)'
        i=0
        for module in "${modulearray[@]}"
          do
            i=$[$i +1]
            if [ ${#modulearray[@]} > 1 -a $i == ${#modulearray[@]} ]; then
              ak run "-i" "$module" "-d $dbname"
            else
             ak run "-i" "$module" "-d $dbname" "--stop-after-init"
            fi
        done
    else
       ak run "-i" "$module" "-d $dbname"
    fi
COMMENT1
    ;;

  freeze)
    shift
    echo "Freeze project an new frozen.cfg will be generated"
    python "$WORKDIR/bin/buildout" "$@" -o openerp:freeze-to=frozen.cfg
    ;;

  console)
    shift
    ak wait_postgres
    python "$WORKDIR/bin/python_openerp" "$@"
    ;;

  server_test)
    shift
    echo "Test the module $@ on db"
    export FROM_BASH=true
    if [ -z "$1" ]; then
        module="all"
    else
        module="$@"
    fi
    ak run "-u" "$module" "-d db" "--stop-after-init" "--test-enable"
    ;;

  code_test)
    shift
    echo "Launch flake8 and pylint tests."
    export FROM_BASH=true
    set +e
    CONFIG_DIR="/opt/devstep/tests/"

    if [ -z "$1" ]; then
        cd /workspace/modules
        module_to_test=$(ls)
    else
        cd $(find /workspace/parts -name $@)
        module_to_test="$@"
    fi

    echo "Run flake8 tests"
    flake8 . --config=${CONFIG_DIR}/travis_run_flake8__init__.cfg
    flake8 . --config=${CONFIG_DIR}/travis_run_flake8.cfg

    echo "Run pylint tests"
    pylint --rcfile=${CONFIG_DIR}/travis_run_pylint.cfg $module_to_test
    ;;

# Postgresql Command

  load)
    shift
    ak wait_postgres
    dbname=${2-"db"}
    echo "Loading database $1 in $dbname"
    createdb $dbname
    # force drop db if arg -f
    dumpfile=""
    parmindex=0
    for param in "$@"
      do
        parmindex += 1
        if [[ "$param" == "-f" ]]; then
          echo -e "\tDrop : $dbname"
          dropdb $dbname --if-exists
          set -- "${@:1:$parmindex-1}" "${@:$parmindex+1}"
        fi
    done
    echo -e "\tLoad : $dbname"
    if [[ $1 =~ \.gz$ ]]; then
        gunzip -c $1 | psql $dbname
    else
        psql $dbname < $1
    fi
    echo "Inactivated cron"
    psql $dbname -c "UPDATE ir_cron SET active=False"
    ;;

  dump)
    shift
    ak wait_postgres
    dbname=${2-"db"}
    file=${1-$dbname}
    echo "Dump database $dbname to $WORKDIR/backup/$file.sql.gz"
    pg_dump $dbname | gzip > "$WORKDIR/backup/$file.sql.gz"
    ;;

  reset_pwd)
    shift
    dbname=${2-"db"}
    script=$(cat <<EOF
session.open(db='$dbname')
user_ids = session.registry('res.users').search(session.cr, 1, [])
for user in session.registry('res.users').browse(session.cr, 1, user_ids):
    user.write({'password':'admin'})

session.cr.commit()
EOF
)
    echo "$script" | ak console
    ;;

  wait_postgres)
    [ ! -d /etc/devstep/service/postgresql ] && exit
    [ -f /home/devstep/log/postgresql.log ] && r=$(grep "ready to accept connections" /home/devstep/log/postgresql.log)
    [ -z "$r" ] && echo "waiting for Postgresql embedded server to start..."
    while [ -z "$r" ]
    do
      sleep 0.1
      [ -f /home/devstep/log/postgresql.log ] && r=$(grep "ready to accept connections" /home/devstep/log/postgresql.log)
    done
    sleep 0.01
    if [ -z "$(psql -l | grep db | grep $DOCKER_USER)" ]; then
      sleep 0.3
      sudo setuidgid postgres psql -c "ALTER DATABASE db OWNER TO $DOCKER_USER;"
      sleep 0.3
    fi
    exit
    ;;

  help)
    cat<<EOF
    Usage:
      ak [COMMAND] [ARGS...]
      ak --help

    Commands:
      run       Run Odoo
      build     Build Your Project using frozen.conf if existing or buildout.dev.cfg
                If you have an existing frozen.cfg and you want to force the update
                just add --update as arguments "ak build --update"
      init       Init new odoo db by installing modules
                ak init [-d dbname] [-f] [--demo]
                -f to force drop then create dbname
                --demo to init db by demo data
      freeze    Freeze all dependency for your project
      console   Open a Odoo Shell
      load      Load a database from a file args. ak load [file] [dbname] [-f to
                force reload (drop then create db)]
      dump      Dump a database ak dump [file] [dbname]
      reset_pwd Set 'admin' as the password of all users
      upgrade   Run database upgrade : ak upgrade [dbname] bd by default
EOF
    ;;

  *)
    [ ! -z "$1" ] && exec ssh "$SSH_USER@$SERVER" "$@"
    ;;

esac
