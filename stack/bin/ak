#!/usr/bin/env bash
set -e

SERVER=${SERVER:="$2.akretion.com"}
POSTGRESQL_SV=${POSTGRESQL_SV:="/etc/devstep/service/postgresql"}
POSTGRESQL_DB=${POSTGRESQL_DB:="db"}
POSTGRESQL_DATA=${POSTGRESQL_DATA:="/workspace/.db"}
POSTGRESQL_BACKUP=${POSTGRESQL_BACKUPS:="/workspace/.db_backups"}
WORKDIR=${WORKDIR:="/workspace"}
DOCKER_USER=${DOCKER_USER:="developer"}
BUILDOUT=${BUILDOUT:="buildout.dev.cfg"}
IMAGE_EGGS_DIR=${IMAGE_EGGS_DIR:="/opt/devstep/addons/voodoo/eggs"}

# *************************** INITIALISATION FIRST RUN ********************

# Link the shared eggs folder or init a new one
if $SHARED_EGGS; then
  for folder in eggs downloads
  do
    if [ ! -d "$SHARED_FOLDER/$folder" ]; then
        mkdir $SHARED_FOLDER/$folder
    fi
    if [ ! -d "$WORKDIR/$folder" ]; then
      ln -s $SHARED_FOLDER/$folder $WORKDIR/$folder
    fi
  done
elif [ ! -d "$WORKDIR/eggs" ]; then
  mkdir $WORKDIR/eggs
fi

if [[ -z $(ls "$WORKDIR/eggs" | grep psycopg) ]]; then
  echo "initializing shared host eggs directory from Docker image"
  cp "$IMAGE_EGGS_DIR"/. $WORKDIR/eggs -R
fi

# Generate bin/buildout if missing
if [ ! -f "$WORKDIR/bin/buildout" ]; then
  echo "Bootstrapping Buildout..."
  cd $WORKDIR
  wget https://raw.github.com/buildout/buildout/master/bootstrap/bootstrap.py
  python bootstrap.py
  rm bootstrap.py
fi

# *************************** COMMAND DISPATCH ********************

case $1 in

# Buildout & Co command

  run)
    shift
    [ ! -f "$WORKDIR/bin/start_openerp" ] || [ ! -f "$WORKDIR/parts/odoo/setup.py" ] && \
    export FROM_BASH=true && ak build
    ak wait_postgres
    python "$WORKDIR/bin/start_openerp" "$@"
    ;;

  debug)
    shift
    ak wait_postgres
    python "$WORKDIR/bin/start_openerp" "$@" "--debug"
    ;;

  build)
    shift
    file="buildout.dev.cfg"
    echo "building project with Anybox Buildout recipe and config file $file"
    echo "this can take a while..."
    python "$WORKDIR/bin/buildout" "$@" "-c" "$file"
    ;;

  freeze)
    shift
    echo "Freeze project an new frozen.cfg will be generated"
    python "$WORKDIR/bin/buildout" "$@" -o openerp:freeze-to=frozen.cfg
    ;;

  console)
    shift
    ak wait_postgres
    python "$WORKDIR/bin/python_openerp" "$@"
    ;;

  server_test)
    shift
    echo "Test the module $@ on db"
    export FROM_BASH=true
    if [ -z "$1" ]; then
        module="all"
    else
        module="$@"
    fi
    ak run "-u" "$module" "-d db" "--stop-after-init" "--test-enable"
    ;;

  code_test)
    shift
    echo "Launch flake8 and pylint tests."
    export FROM_BASH=true
    set +e
    CONFIG_DIR="/opt/devstep/tests/"

    if [ -z "$1" ]; then
        cd /workspace/modules
        module_to_test=$(ls)
    else
        cd $(find /workspace/parts -name $@)
        module_to_test="$@"
    fi

    echo "Run flake8 tests"
    flake8 . --config=${CONFIG_DIR}/travis_run_flake8__init__.cfg
    flake8 . --config=${CONFIG_DIR}/travis_run_flake8.cfg

    echo "Run pylint tests"
    pylint --rcfile=${CONFIG_DIR}/travis_run_pylint.cfg $module_to_test
    ;;

# Postgresql Command

  psql)
    shift
    ak wait_postgres
    if [ -z "$1" ]; then
      psql db
    else
      psql "$@"
    fi
    ;;

  load)
    shift
    ak wait_postgres
    dbname=${2-"db"}
    echo "Loading database $1 in $dbname"
    createdb $dbname
    if [[ $1 =~ \.gz$ ]]; then
        gunzip -c $1 | psql $dbname
    else
        psql $dbname < $1
    fi
    echo "Inactivated cron"
    psql $dbname -c "UPDATE ir_cron SET active=False"
    ;;

  reload)
    shift
    ak wait_postgres
    dbname=${2-"db"}
    echo "Drop database $dbname"
    dropdb $dbname --if-exists
    ak load $1 $dbname
    ;;

  pitr)
    shift
    case $1 in
      backup)
        shift
        if [ ! -f $POSTGRESQL_BACKUPS/pitr_list ]; then
            rm -rf $POSTGRESQL_BACKUPS
            mkdir $POSTGRESQL_BACKUPS
            touch $POSTGRESQL_BACKUPS/pitr_list
            pitrery backup
        fi
        echo $(date +'%F %T') UTC label: $@ >> $POSTGRESQL_BACKUPS/pitr_list
      ;;
      list)
        pitr_list=$POSTGRESQL_BACKUP/pitr_list
        [ -f $pitr_list ] && cat -n $pitr_list
      ;;
      purge)
        read -p "purge all existing pitr files (y/n)? " choice
        case "$choice" in
          y|Y) rm -rf $POSTGRESQL_BACKUPS;;
          *) echo "canceled";;
        esac
      ;;
      restore)
        shift
        num=$1
        pitr_list=$POSTGRESQL_BACKUPS/pitr_list
        [ ! -f $pitr_list ] && echo "no backup, please run 'ak pitr backup' before." && exit
        [ -z "$num" ] && num=$(wc -l $pitr_list | cut -d ' ' -f1)
        backup=$(sed -n $num"p" $pitr_list)
        read -p "delete databases and restore from backup $num ($backup) (y/n)? " choice
        target_time=$(echo $backup | awk '{printf ("%s %s", $1, $2)}')
        case "$choice" in
          y|Y)
            sv stop $POSTGRESQL_SV
            rm -rf $POSTGRESQL_DATA
            pitrery restore -d "$target_time"
            sv start $POSTGRESQL_SV
            ak wait_postgres
            ;;
          *) echo "canceled";;
          esac
      ;;
      *)
        echo "usage: pitr [backup|list|restore|purge] [ARGS...]"
      ;;
    esac
    ;;

  dump)
    shift
    ak wait_postgres
    dbname=${2-"db"}
    file=${1-$dbname}
    echo "Dump database $dbname to $WORKDIR/backup/$file.sql.gz"
    pg_dump $dbname | gzip > "$WORKDIR/backup/$file.sql.gz"
    ;;

  reset_pwd)
    shift
    dbname=${2-"db"}
    script=$(cat <<EOF
session.open(db='$dbname')
user_ids = session.registry('res.users').search(session.cr, 1, [])
for user in session.registry('res.users').browse(session.cr, 1, user_ids):
    user.write({'password':'admin'})

session.cr.commit()
EOF
)
    echo "$script" | ak console
    ;;

  wait_postgres)
    until pg_isready
    do
        echo "waiting for Postgresql embedded server to start..."
        sleep 2
    done
    if [ -z "$(psql -l | grep db | grep $DOCKER_USER)" ]; then
      sleep 0.3
      sudo setuidgid postgres psql -c "ALTER DATABASE db OWNER TO $DOCKER_USER;"
      sleep 0.3
    fi
    exit
    ;;

  help)
    cat<<EOF
    Usage:
      ak [COMMAND] [ARGS...]
      ak --help

    Commands:
      run       Run Odoo
      debug     Run Odoo in debug mode
      build     Build Your Project using frozen.conf if existing or buildout.dev.cfg
                If you have an existing frozen.cfg and you want to force the update
                just add --update as arguments "ak build --update"
      freeze    Freeze all dependency for your project
      console   Open a Odoo Shell
      psql      Open a Psql shell
      load      Load a database from a file args. ak load [file] [dbname]
      reload    Drop and load a database from a file args. ak reload [file] [dbname]
      dump      Dump a database ak dump [file] [dbname]
      pitr      Make a pitr backup: ak pitr backup [label]
                List all pitr backups: ak pitr list
                Restore a pitr backup: ak pitr restore [number]
                purge all pitr files: ak pitr purge
      reset_pwd Set 'admin' as the password of all users
EOF
    ;;

  *)
    [ ! -z "$1" ] && exec ssh "$SSH_USER@$SERVER" "$@"
    ;;

esac
